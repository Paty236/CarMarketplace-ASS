@page "/reset-password"

@using CarMarketplace.Application.DTOs
@using CarMarketplace.Presentation.Services.UserAccountServices

@inject ISnackbar snackbar
@inject IUserAccountService userService
@inject NavigationManager navigationManager

<br />
<div>
    <div class="container page">
        <div class="row">
            <div class="col-md-6 offset-md-3 col-xs-12">
                <h1 class="mb-3 text-xs-center">Reset Password</h1>
                <EditForm Model="@resetCommand">
                    <DataAnnotationsValidator />
                    @if (isEmail)
                    {
                        <fieldset class="mt-3 form-group">
                            <div>
                                <MudTextField class="form-control form-control-lg"
                                              @bind-Value="resetCommand.Code" Label="Code"
                                              For="@(() => resetCommand.Code)"
                                              Variant="Variant.Outlined"></MudTextField>
                            </div>
                        </fieldset>
                        <fieldset class="mt-3 form-group">
                            <div>
                                <MudTextField class="form-control form-control-lg" InputType="@TxtType"
                                    @bind-Value="resetCommand.Password" Label="NewPassword"
                                    For="@(() => resetCommand.Password)"
                                    Variant="Variant.Outlined"></MudTextField>
                            </div>
                        </fieldset>
                        <fieldset class="mt-3 form-group">
                            <div>
                                <MudTextField class="form-control form-control-lg" InputType="@TxtType"
                                    @bind-Value="resetCommand.ConfirmPassword" Label="ConfirmPassword"
                                    For="@(() => resetCommand.ConfirmPassword)"
                                    Variant="Variant.Outlined"></MudTextField>
                            </div>
                            <span>
                                <MudCheckBox @bind-Checked="@showPassword" Color="Color.Primary" @onclick="ShowPassword" />
                                Show Password
                            </span>
                        </fieldset>
                        <MudButton OnClick="Save" class="mt-3 btn btn-lg btn-primary pull-xs-right"
                            Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Send"
                            Color="Color.Primary" ButtonType="MudBlazor.ButtonType.Submit">
                                Reset Passwords
                        </MudButton>
                    }
                    else
                    {
                        <fieldset class="mt-3 form-group">
                            <div>
                                <MudTextField class="form-control form-control-lg" InputType="InputType.Email"
                                              @bind-Value="resetCommand.Email" Label="Email"
                                              For="@(() => resetCommand.Email)"
                                              Variant="Variant.Outlined"></MudTextField>
                            </div>
                        </fieldset>
                        <MudButton OnClick="ResetPass" Variant="Variant.Filled" Color="Color.Primary" 
                                    Style="text-align: center" Class="mt-5">Continue</MudButton>
                    }
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private ResetPasswordDto resetCommand = new ResetPasswordDto();
    public InputType TxtType = InputType.Password;
    public bool showPassword { get; set; } = false;

    private bool isEmail = false;

    public void ShowPassword()
    {
        if (showPassword == false)
        {
            TxtType = InputType.Text;
        }
        else
        {
            TxtType = InputType.Password;
        }
    }

    private async Task ResetPass()
    {
        if (!string.IsNullOrEmpty(resetCommand.Email))
        {
            var result = await userService.SendConfirmationCode(resetCommand.Email);

            if (result)
            {
                snackbar.Add("The security code has been sent to your email address.", Severity.Success);
                isEmail = true;
            }
            else snackbar.Add("There is no user with this email", Severity.Error);
        }
    }

    private async void Save()
    {
        if (resetCommand.Password != resetCommand.ConfirmPassword)
        {
            snackbar.Add("Passwords do not match", Severity.Error);
            return;
        }

        var confirmationResult = await userService.VerifyConfirmationCode(resetCommand.Email, resetCommand.Code);
        if (confirmationResult)
        {
            resetCommand.Password = System.Net.WebUtility.UrlEncode(resetCommand.Password);
            var result = await userService.UserResetPassword(resetCommand.Email, resetCommand.Password);

            if (result != null) snackbar.Add("Password has been reset. Log in with your new password.", Severity.Success);
            else snackbar.Add("An error occurred, please try again.", Severity.Error);

            if (result != null) navigationManager.NavigateTo("/login");
        }
        else
        {
            snackbar.Add("Wrong security code. Try again.", Severity.Error);
        }
    }
}
