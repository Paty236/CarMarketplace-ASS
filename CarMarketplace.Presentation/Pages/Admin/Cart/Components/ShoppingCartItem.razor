@using CarMarketplace.Application.DTOs

<MudDivider/>
<MudStack Row="true" Spacing="2">
    <img src="@($"data:image/jpeg;base64,{Convert.ToBase64String(CartItem.Product.Image)}")" alt="@CartItem.Product.Description" style="width: 25%; height: auto;" />
    <MudGrid>
        <MudItem xs="6">
            <MudText Typo="Typo.subtitle1"><b>@CartItem.Product.Name</b></MudText>
            <MudText Typo="Typo.body2">@CartItem.Product.Description</MudText>
        </MudItem>
        <MudItem xs="4">
            <MudStack AlignItems="AlignItems.End" Justify="Justify.SpaceBetween" Class="mud-height-full">
                <MudText Typo="Typo.subtitle1">
                    <b>@CartItem.TotalPrice.ToString("C2")</b>
                </MudText>
                <MudButton OnClick=OnRemoveAsync Color="Color.Primary" Size="Size.Small">Remove</MudButton>
            </MudStack>
        </MudItem>
    </MudGrid>
</MudStack>

@code {
    int _desiredQuantity;
    string Title => $"Update {CartItem.Product.Name} quantity in cart";

    [Parameter, EditorRequired]
    public CartItemDto CartItem { get; set; } = null!;

    [Parameter, EditorRequired]
    public EventCallback<ProductDetailsDto> OnRemoved { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<(int Quantity, ProductDetailsDto Product)> OnUpdated { get; set; }

    protected override void OnParametersSet() => _desiredQuantity = CartItem.Quantity;

    Task SaveOnUpdateAsync(int value)
    {
        _desiredQuantity = value;
        return TryInvokeDelegate(OnUpdated, (_desiredQuantity, CartItem.Product));
    }

    Task OnRemoveAsync() => TryInvokeDelegate(OnRemoved, CartItem.Product);

    Task OnUpdateAsync() => TryInvokeDelegate(OnUpdated, (_desiredQuantity, CartItem.Product));

    Task TryInvokeDelegate<TArg>(EventCallback<TArg> callback, TArg args) =>
        callback.HasDelegate
            ? callback.InvokeAsync(args)
            : Task.CompletedTask;

    private string GetImageSrc(byte[] image)
    {
        if (image == null || image.Length == 0)
            return null;

        return $"data:image/png;base64,{Convert.ToBase64String(image)}";
    }
}